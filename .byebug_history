q
c
n
dst
n
success = convert(parameters, :source => "#{File.expand_path(src.path)}#{'[0]' unless animated?}", :dest => File.expand_path(dst.path))
parameters
n
convert_options
transformation_command
n
c
super.join(" ").sub(/ -crop \S+/, '').split("  ")
super.join(" ").sub(/ -crop \S+/, '')
super
c
super
c
transformation_command
convert_options
source_file_options
convert(parameters.flatten.compact.join(" ").strip.squeeze(" "), :source => "#{File.expand_path(src.path)}#{'[0]' unless animated?}", :dest => File.expand_path(dst.path))
parameters.flatten.compact.join(" ").strip.squeeze(" ")
n
convert_options
transformation_command
n
c
self.basename
self
@basename
n
c
crop_command + super.join(' ').sub(/ -crop \S+/, '')
c
crop_command + super.join(' ')
crop_command
super
crop_command + super.sub(/ -crop \S+/, '')
c
super
super.join(' ').sub(/ -crop \S+/, '').split(' ')
crop_command
crop_command + super.join(' ').sub(/ -crop \S+/, '').split(' ')
n
super.join(' ')
super
crop_command
crop_commande
n
env
n
styles
n
file
n
dst
n
parameters.flatten.compact.join(" ").strip.squeeze(" ")
parameters.flatten.compact.join(" ").strip.squeeze( " ")
parameters.flatten.compact.join(" ").strip
parameters.flatten.compact.join(" ")
parameters.flatten.compact
parameters.flatten
parameters
n
crop_command
crop_commande
super.join(' ').sub(/ -crop \S+/, '').split(' ')
super.join(' ')
super
c
image
c
image
c
image.reprocess!
image
c
n
c
@photo.crop_x
c
@photo.crop_x
c
!crop_x.blank?
crop_x.blank?
c
@photo.id
@photo.image.url
photo_params[:url]
photo_params.url
n
@photo.crop_x
@photo
n
c
n
c
photo_params
@photo.crop_x
@photo
n
c
photo_params
c
photo_params
c
photo_params
c
photo_params
c
photo_params
c
params
c
@photo
n
c
photo_params
photo_params.url
n
@photo
n
c
photo_params
c
n
@user.save
@user
user_params
c
profile_params
c
profile_params
@profile
n
c
attachment.instance.photoable
attachment.instance.save
attachment.instance
c
attachment.instance.photoable
c
attachment.instance.photoable
attachment.instance
c
attachment.instance.photoable
attachment.instance.photoable_type
attachment.instance.file_owner
attachment.instance.photoable.class
attachment.instance.photoable
attachment.instance.attachable.class
attachment.instance
attachment.instance.attachable
attachment.instantance.attachable
self
attachment
style
c
super
c
self
attachment.instance
attachment
c
@photo
n
photo_params
c
photo[:image]
photo_params
c
n
photo_params
q
c
user.profile
q
c
@current_user
@current)user
n
user
c
current_user
c
n
user
c
current_user
c
user
c
logged_in?
current_user
c
@profile.avatar
n
profile_params
c
profile_params
c
profile_params
profile_params[:avatar]
c
profile_params[:avatar]
c
n
c
@p.avatar
@p = current_user.profile
current_user.profile.update(profile_params)
profile_params[:avatar]
profile_params.avatar
profile_params
c
@profile.avatar = File.open(profile_params[:avatar], 'r')
@profile
n
profile_params
c
profile_params
c
profile_params
@profile
n
c
params[:profile]
params[:id]
profile_params
@profile
n
c
@profile
c
@profile
n
params[:id]
c
User.find_by(user_params)
user_params
c
user
n
password
email
n
c
current_user
c
logged_in?
c
User.find(params[:id])
User.find(params[:id]
current_user.id == params[:id]
